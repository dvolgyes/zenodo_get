# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: cimg/python:3.10 # Updated Python version

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            # Ensure uv is in PATH for subsequent steps
            # CircleCI's BASH shells usually pick up $HOME/.cargo/bin, but being explicit is safer
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV 
            source $BASH_ENV

      # Download and cache dependencies using uv
      - restore_cache:
          keys:
            - v2-uv-venv-{{ checksum "pyproject.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v2-uv-venv-

      - run:
          name: Install Dependencies using uv
          command: |
            uv venv .venv --seed # Use --seed for a known empty venv
            source .venv/bin/activate
            # Install project, coverage for tests/test.sh, codecov and coveralls for reporting
            uv pip install . coverage codecov coveralls

      - save_cache:
          paths:
            - ./.venv # Cache the uv virtual environment
          key: v2-uv-venv-{{ checksum "pyproject.toml" }}

      # run tests!
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            source .venv/bin/activate # Ensure the venv is active
            sh tests/test.sh
            # codecov is typically run after tests and coverage data generation
            # python -m codecov # This might be handled by a codecov orb or a direct upload script
            # For now, assuming codecov uploader will be used or this line is sufficient if configured
            # If using codecov uploader:
            # bash <(curl -s https://codecov.io/bash)
            # Assuming coverage data is generated by test.sh (e.g. .coverage file)
            # The original script used `python -m codecov`, which implies the codecov package handles upload.
            codecov # codecov package often provides a direct executable

      - store_artifacts:
          path: test-reports
          destination: test-reports
